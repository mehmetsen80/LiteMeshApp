version: '3.8'

networks:
  default:
  lite-mesh-network:
    driver: bridge
    name: lite-mesh-network  # Explicitly set the network name

services:

  # postgres
  postgres-service:
    build:
      context: .
      dockerfile: ./.kube/postgres/Dockerfile
    command: postgres -c "max_connections=200"
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - ./.kube/postgres/data/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - lite-mesh-network


  # postgres admin
  pgadmin-service:
    build:
      context: .
      dockerfile: ./.kube/pgadmin/Dockerfile
    restart: always
    ports:
      - "9090:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - ./.kube/pgadmin/data/:/var/lib/pgadmin
    networks:
      - lite-mesh-network

  # keycloak
  keycloak-service:
    build:
      context: .
      dockerfile: ./.kube/keycloak/Dockerfile
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-service:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
#      KC_HOSTNAME_ADMIN: http://localhost:8281
      KC_HOSTNAME_STRICT: false

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

    command:
      - start-dev
      - --import-realm
      - --export-realm
    volumes:
      - .kube/keycloak/data/import:/opt/keycloak/data/import
      - .kube/keycloak/data/export:/opt/keycloak/data/export
    depends_on:
      postgres-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "8281:8080"
    networks:
      - lite-mesh-network

  # mongodb
  mongodb-service:
    build:
      context: .
      dockerfile: ./.kube/mongodb/Dockerfile
#    healthcheck:
#      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
#      interval: 10s
#      timeout: 10s
#      retries: 3
#      start_period: 20s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopw
      MONGO_GATEWAY_URL: mongodb-service
    ports:
      - "27017:27017"
    volumes:
      - ./.kube/mongodb/data/:/data/db
    networks:
      - lite-mesh-network

  # redis
  redis-service:
    build:
      context: .
      dockerfile: ./.kube/redis/Dockerfile
#    container_name: redis_container
    environment:
      REDIS_GATEWAY_URL: redis-service
    ports:
      - "6379:6379"
    volumes:
      - ./.kube/redis/data/:/var/lib/redis/data
      - ./.kube/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
#    healthcheck:
#      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    networks:
      - lite-mesh-network


#
#  ##### ENABLE THIS FOR DOCKERIZATION FOR ALL REMAINING SERVICES
#  # Discovery Server (Eureka)
#  discovery-service:
#    build:
#      context: .
#      dockerfile: .kube/eureka/Dockerfile
#    #    image: discovery-service:latest
#    environment:
#      EUREKA_KEY_STORE: eureka-keystore.jks
#      EUREKA_KEY_STORE_PASSWORD: 123456
#      EUREKA_TRUST_STORE: eureka-truststore.jks
#      EUREKA_TRUST_STORE_PASSWORD: 123456
#      EUREKA_GATEWAY_URL: discovery-service
#      EUREKA_ALIAS_NAME: eureka-app-container
#    ports:
#      - "8761:8761"
#    #      - "443:443"
#    #    healthcheck:
#    #      test: [ "CMD-SHELL", "curl -f https://discovery-service:8761" ]
#    #      interval: 10s
#    #      timeout: 10s
#    #      retries: 10
#    volumes:
#      - ./discovery-server:/app/discovery-server
#      - ./keys:/app/keys
#    networks:
#      - lite-mesh-network
#
#
#  # gateway
#  api-gateway-service:
#    build:
#      context: .
#      dockerfile: ./.kube/gateway/Dockerfile
#    environment:
#      GATEWAY_TRUST_STORE: /app/gateway-truststore.jks
#      GATEWAY_TRUST_STORE_PASSWORD: 123456
#      GATEWAY_KEY_STORE: /app/gateway-keystore.jks
#      GATEWAY_KEY_STORE_PASSWORD: 123456
#      GATEWAY_API_PORT: 7777
#      GATEWAY_ALIAS_NAME: gateway-app-container
#      REDIS_GATEWAY_URL: redis-service
#      MONGO_GATEWAY_URL: mongodb-service
#      KEYCLOAK_GATEWAY_URL: keycloak-service
#      KEYCLOAK_GATEWAY_PORT: 8080
#      EUREKA_GATEWAY_URL: discovery-service
#      EUREKA_INSTANCE_URL: api-gateway-service
#    volumes:
#      - ./api-gateway:/app/api-gateway
#      - ./keys:/app/keys
#    ports:
#      - "7777:7777"
##    deploy:
##      replicas: 3
##      restart_policy:
##        condition: on-failure
#    networks:
#      - lite-mesh-network
#    depends_on:
#      - discovery-service
#      - mongodb-service
#      - keycloak-service
#      - redis-service
#
#
#  # inventory
#  # enable deploy: replicas if needed
#  inventory-service:
#    build:
#      context: .
#      dockerfile: ./.kube/inventory/Dockerfile
#    environment:
#      CLIENT_TRUST_STORE: /app/client-truststore.jks
#      CLIENT_TRUST_STORE_PASSWORD: 123456
#      CLIENT_KEY_STORE: /app/client-keystore.jks
#      CLIENT_KEY_STORE_PASSWORD: 123456
#      CLIENT_ALIAS_NAME: inventory-service-container
#      EUREKA_CLIENT_URL: discovery-service
#      EUREKA_INSTANCE_URL: inventory-service
#      KEYCLOAK_CLIENT_URL: keycloak-service
#      KEYCLOAK_CLIENT_PORT: 8080
#      GATEWAY_SERVICE_URL: api-gateway-service
##    deploy:
##      replicas: 3
#    networks:
#      - lite-mesh-network
#    volumes:
#      - ./inventory-service:/app/inventory-service
#      - ./keys:/app/keys
#    depends_on:
#      - api-gateway-service
#
#
#  # product
#  # enable deploy: replicas if needed
#  product-service:
#    build:
#      context: .
#      dockerfile: ./.kube/product/Dockerfile
#    environment:
#      CLIENT_TRUST_STORE: /app/client-truststore.jks
#      CLIENT_TRUST_STORE_PASSWORD: 123456
#      CLIENT_KEY_STORE: /app/client-keystore.jks
#      CLIENT_KEY_STORE_PASSWORD: 123456
#      CLIENT_ALIAS_NAME: product-service-container
#      EUREKA_CLIENT_URL: discovery-service
#      EUREKA_INSTANCE_URL: product-service
#      KEYCLOAK_CLIENT_URL: keycloak-service
#      KEYCLOAK_CLIENT_PORT: 8080
#      GATEWAY_SERVICE_URL: api-gateway-service
#    #    deploy:
#    #      replicas: 3
#    networks:
#      - lite-mesh-network
#    volumes:
#      - ./product-service:/app/product-service
#      - ./keys:/app/keys
#    depends_on:
#      - api-gateway-service

